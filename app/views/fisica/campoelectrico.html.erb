<!--  CAMPO ELECTRICO DEBIDO A UNA LINEA IUNFINITA UNIFORMEMENTE CARGADO -->
<!-- MAIN MENU -->
<div class="header" align="center">
  <!-- -->
  <nav class="navbar navbar-inverse">
    <div class="container-fluid">
      <div class="navbar-header">
        <a class="navbar-brand" href="/fisica/authors">PROYECTO FINAL FISICA III</a>
      </div>
      <ul class="nav navbar-nav">
        <li><a href="index">Interaccion entre cargas electricas</a></li>
        <li class="active"><a href="/fisica/index">Campo electrico debido cargas en linea infinita</a></li>
        <li><a href="/fisica/index">Circuitos eléctricos</a></li>
      </ul>
    </div>
  </nav>
</div>
<!-- END MENU -->
<div class="page-header">
  <h1><small>Campo eléctrico debido a una línea uniformemente cargada</small></h1>
</div>
<!-- KONVA -->
<div id="container2"></div>
<button onclick="start()">Start</button>
<button onclick="movePointR()">Move point right</button>
<button onclick="movePointI()">Move point left</button>
<button onclick="movePointTo()">Move point to</button>

  <script type="text/javascript">

      //GLOBAL VARIABLES
      let campoE = [];
      let diferenciales = [];
      let Q = 50000;
      let hi= 0;
      let hf = 500;
      let E = new Konva.Arrow({});

      let stage = new Konva.Stage({
          container: 'container2',   // id of container <div>
          width: 1000,
          height: 500
      });
      let layer = new Konva.Layer();


      stage.add(layer); //Add layer to stage

      let Liney = new Konva.Line({
          points: [50, hi, 50, hf],
          stroke: 'black',
          strokeWidth: 5
      });
      let Linex = new Konva.Line({
         points: [0, 250, 1000, 250],
          stroke: 'black',
          strokeWidth: 5,
          dash: [33, 10]
      });
      let point = new Konva.Circle({
          x: Math.random() * (stage.getWidth() - 25) + 25,
          y: 250,
          radius: 10,
          fill: 'red',
      });

      layer.add(Liney);
      layer.add(Linex);
      layer.add(point);
      layer.draw();

      function movePointR()
      {
          if (E !== null) E.hide();

          point.x((point.x() + 5));
          layer.draw();
      }
      function movePointI()
      {
          if (E !== null) E.hide();

          if(point.x() > 50)
          {
              point.x((point.x() - 5));
              layer.draw();
          }
          else
          {
              window.alert("La position x debe estar en el intervalo [50, 1000].");
          }

      }
      function  movePointTo(x)
      {
          if (E !== null) E.hide();
          let input = prompt("x position: ", "");
          if (input !== null) {
              try {
                  let xpos = parseFloat(input);
                  if(xpos >= 50 && xpos <= 1000) {
                      point.x(xpos);
                      layer.draw();
                  }
                  else
                  {
                      window.alert("La position x debe estar en el intervalo [50, 1000].");
                  }
              }
              catch (e) {
                  window.alert("Elija una position valida. " + e);
              }
          }
      }
      function start() { //Generar el campo electrico

          let xdist = point.x() - 50;

          let dq = Q / (hf - hi);
          let deMag = 0.0;

          let ydist = 0.0;
          let r = 0.0;

          let midPointLine = ((hf - hi)/2);

          //Calcular el dE para cada diferencial de carga en la linea infinita
          let k = 0;
          for(let a = hi; a <= hf; a++)
          {
              let deVec = [];
              if(a < midPointLine){
                  ydist = midPointLine - a;
                  r = Math.sqrt((ydist * ydist) + (xdist * xdist));
                  if(xdist > ((hf - hi)/2))
                    deMag = (dq/(r*r)); //Magnitud del E
                  else
                      deMag = (dq / (xdist * Math.sqrt(xdist*xdist + a*a)));
                  deVec[0] = deMag * (xdist/r);
                  deVec[1] = (-1) * deMag * (ydist/r);
              }
              else if( a === midPointLine) {
                  ydist = 0;
                  r = xdist;
                  deMag = (dq/(r*r)); //Magnitud del E
                  deVec[0] = deMag * (xdist/r);
                  deVec[1] = deMag * (ydist/r);
              }
              else{
                  ydist = a - midPointLine;
                  r = Math.sqrt((ydist * ydist) + (xdist * xdist));
                  if(xdist > 230)
                      deMag = (dq/(r*r)); //Magnitud del E
                  else
                      deMag = (dq / (xdist * Math.sqrt(xdist*xdist + ((ydist - midPointLine)*(ydist - midPointLine)))));
                  deVec[0] = deMag * (xdist/r);
                  deVec[1] = deMag * (ydist/r);
              }
              //console.log("dq:  X: " + deVec[0] + "  Y: " + deVec[1]);
              diferenciales[k] = [deVec[0], deVec[1]];
              k++;
          }

          //Sumar componentes de los diferenciales
          let x = 0.0 , y = 0.0;
          for(let i = 0; i < diferenciales.length; i++)
          {
              x = x  + diferenciales[i][0];
              y = y + diferenciales[i][1]
              //console.log("dq:  X: " + diferenciales[i][0] + "  Y: " + diferenciales[i][0]);
          }
          campoE[0] = x.toFixed(4);
          campoE[1] = y.toFixed(4);



          //window.alert("CAMPO ELECTRICO en el punto rojo: \n" +  "X: " + campoE[0] + " Y: " + campoE[1]);
          let txt = "";
          for(let i = 0; i < diferenciales.length; i++)
          {
              txt = txt + "de" + (i+1).toString() + " | X: " + diferenciales[i][0].toFixed(4).toString() + " | Y: " + diferenciales[i][1].toFixed(4).toString() + "\n";
          }
          //window.alert(txt);

          E = new Konva.Arrow({
              x: point.x(),
              y: (hf - hi)/2,
              points: [0, 0, campoE[0]*100, 0],
              pointerLength: 15,
              pointerWidth : 10,
              fill: 'green',
              stroke: 'green',
              strokeWidth: 5,
              id:"vector"
          });
          window.alert(campoE[0]*400);
          layer.add(E);
          layer.draw();

      }



</script>